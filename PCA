
# Actividad 3 - Análisis de un caso práctico en R

Equipo 3 Lote 10: Carlos Boillos, Celia García, Pablo González y Elisabet Roura

La actividad 3 consiste en el análisis de un caso práctico en R, el dataset de trebajo, se trata de una base de datos de 65 que contiene información sobre la expresión génica de 46 genes, variables bioquímicas, síntomas, otras sociodemográficas y alguns variables de interés como tratamiento, tipo de tumor y extensión tumoral.


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


En primer lugar, se ha establecido el entorno de trabajo y se han cargado las librerías necesarias para ejecutar el código.

```{r, message=FALSE, warning=FALSE}
path <- "/Users/elisa/Documents/1Bioinformatica Master/Estadística y R para ciencias de la salud/R/Actividad 3"
setwd(path)

library(dplyr)
library(stats)   # librería para el PCA
library(ggplot2) # librería para hacer la representación gráfica
library(factoextra)
library(knitr)

#FALTA AÑADIR TODAS LAS LIBERIAS QUE USEIS LOS DEMAS

```

A continuación se ha cargado la base de datos y se ha comprobado que no hay ningún valor missing (NA).

```{r}
#Cargar datos y comprovar que no hay valores missing

df <- read.csv("Dataset expresión genes.csv", row.names = 1 )
any(is.na(df))

df <- df %>%
  select(-id)

```
Para realizar el PCA de la expresión génica hace falta crear un dataset que contenga exclusivamente las variables que reflejan la expresión de los genes. Además, se ha comprovado que la varianza de ningúna de las variables es 0.

```{r}


df_genes <- df%>%
  select(starts_with("AQ_"))


sumas <- colSums(df_genes)
columnascero <- names(sumas[sumas==0]) 
print(columnascero)

```

Se ha llevado acabo la reducción de dimensionalidad mediante el Análisis de Componentes principales (PCA). Es un método que permite reducir la dimensionalidad de los datos de trabajo combinando las variables que explican la mayor parte de la variabilidad, transforandolas en un nuevo conjunto de variables, estas se denominan componentes.

```{r}

pca.results <- prcomp(df_genes, scale= TRUE)
pca.df <- data.frame(pca.results$x)

```

Los eigenvalues o valores propios son valores que miden la varianza explicada total de los componentes princiaples del PCA, los eigenvalues se obtienen elevando al cuadrado la desviación estándar de cada componente. 
A continuación se observa el listado de los eigenvalues para todos los componentes:

```{r}
eigenvalues <-get_eigenvalue(pca.results)
eigenvalues

```
En la primera columna se observan los eigenvalues, que explican la varianza explicada por cada componente y cuanto mayor es, más información retiene ese componente principal.
En la segunda columna se proporciona la varianta total explicada por cada componente en procentaje. Y en la tercera como se va acumulando la varianza explicada a medida que avanzamos por los componentes.

También podemos visualizar gráficamente el porcentaje de la varianza explicada por cada componente a partir de un scree plot.

```{r}
fviz_eig(pca.results, addlabels = TRUE, ylim =c(0,60))
```
Para seleccionar los PCA para seguir con la actividad se han seleccionado un número hasta cubrir almenos un 70% de la varianza de los datos.

```{r}
varianzas <- pca.results$sdev^2
total.varianza <- sum(varianzas)
varianza.explicada <- varianzas/total.varianza
varianza.acumulada <- cumsum(varianza.explicada)
n.pc <- min(which(varianza.acumulada > 0.7))

print(paste("El número de componentes principales para explicar el 70% de la varianza es:" ,n.pc))

```


Los genes contribuyen de diferente manera a cada componente principal. A continuación encontramos como contribuye la expresón génica de los diferentes genes en los 5 componentes seleccionados para seguir con la actividad.

```{r}

var <- get_pca_var(pca.results)

var_5pc <- var$coord[, 1:5]

kable(var_5pc, caption = "Cargas de las Variables en los 5 Primeros Componentes")

```

#Modelo de regresión logística
```{r}
# Creación de terciles de los componentes principales
# Los componentes principales (PC1, PC2, PC3) se dividen en terciles para facilitar la interpretación en la regresión.
for (i in 1:n.pc) {
  tercil_col <- paste0("PC", i, "_tercil")
  df[[tercil_col]] <- cut(df[[paste0("PC", i)]], 
                          breaks = quantile(df[[paste0("PC", i)]], probs = c(0, 1/3, 2/3, 1), na.rm = TRUE), 
                          labels = c("T1", "T2", "T3"), 
                          include.lowest = TRUE)
}

# Conversión de variables categóricas en factores
# Se convierten en factores las variables necesarias para la regresión logística.
df$metastasis <- ifelse(df$extension == "metastasico", 1, 0)
df$metastasis <- as.factor(df$metastasis)  # Convertir en factor para la regresión

df$metastasis <- as.factor(df$metastasis)
df$sexo <- as.factor(df$sexo)
df$trat <- as.factor(df$trat)
df$tipo_tumor <- as.factor(df$tumor)  # Se usa 'tumor' en lugar de 'tipo_tumor'

# Construcción del modelo de regresión logística
# Se utiliza la función glm() con la familia "binomial" para un modelo de regresión logística.
# La variable dependiente es "metastasis" (sí/no).
# Las variables predictoras incluyen:
# - Terciles de los componentes principales (PC1_tercil, PC2_tercil, PC3_tercil).
# - Variables clínicas y sociodemográficas (edad, sexo, tipo de tumor y tratamiento).
modelo <- glm(metastasis ~ PC1_tercil + PC2_tercil + PC3_tercil + edad + sexo + tipo_tumor + trat,
              data = df, family = binomial)

# Resumen del modelo
# Se visualizan los coeficientes del modelo, errores estándar, valores Z y p-valores.
summary(modelo)

# Obtener Odds Ratios (OR) e Intervalos de Confianza (IC 95%)
# Se usan los coeficientes del modelo transformados con exp() para interpretar los OR.
exp(cbind(OR = coef(modelo), confint(modelo)))

# Evaluación del modelo
# Se predicen probabilidades de metástasis a partir del modelo ajustado.
df$prob <- predict(modelo, type = "response")

# Se establece un umbral de clasificación de 0.5 para convertir las probabilidades en 1 (metástasis) o 0 (no metástasis).
df$pred <- ifelse(df$prob > 0.5, "1", "0")
df$pred <- as.factor(df$pred)

# Matriz de confusión y métricas del modelo
# Se evalúa el rendimiento del modelo usando sensibilidad, especificidad y precisión global.
library(caret)
conf_matrix <- confusionMatrix(df$pred, df$metastasis)
conf_matrix

# Generación de tabla con los resultados
# Se genera una tabla bien estructurada con los coeficientes del modelo, OR e IC 95%.
library(gtsummary)
tbl_regression(modelo, exponentiate = TRUE)

```

El modelo de regresión logística muestra una precisión global del 76.92%, pero con una baja sensibilidad del 33.33%, lo que indica que tiene dificultades para identificar correctamente los casos de metástasis. Sin embargo, su especificidad es alta (93.61%), lo que significa que predice con mayor precisión los casos sin metástasis.

En cuanto a los Odds Ratios (OR), ninguna de las variables predictoras alcanza significancia estadística (p > 0.05). Aunque algunas variables como el sexo (OR = 2.37, p = 0.2) y el tipo de tumor (CM vs. CCR, OR = 2.82, p = 0.2) sugieren una posible relación con la presencia de metástasis, los intervalos de confianza son amplios, lo que indica una gran incertidumbre en las estimaciones.

Conclusión:
El modelo no es lo suficientemente fiable para predecir la presencia de metástasis, ya que no identifica correctamente la mayoría de los casos positivos.

